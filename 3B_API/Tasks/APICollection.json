{
	"info": {
		"_postman_id": "14eb7047-e233-48df-9f57-c62a091083ef",
		"name": "APICollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42bb15c4-0e76-43f0-b81a-876ae5b50ec2",
								"exec": [
									"",
									"pm.test(\"Status code Should be 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Status code name should have an 'Not found'string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "faceb05e-89b3-4a98-8cb6-bbc37d468779",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/todo"
					},
					"response": []
				}
			],
			"id": "047f0574-cc05-4f88-b116-cccc982d03ad"
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3b26275-cabd-47b9-a0d5-ce7bce7b09e9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"var JsonData = pm.response.json();\r",
									"pm.test(\"Response to have the title-Fusio\", function () {\r",
									"    pm.expect(JsonData.title).to.include(\"Fusio\");\r",
									"});\r",
									"pm.test(\"Response to have the apiVersion = 6.1.1.0\", function () {\r",
									"    pm.expect(JsonData.apiVersion).to.include(\"6.1.1.0\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b3e9953-4e72-441d-ab42-e40529dc6473",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://demo.fusio-project.org/index.php/",
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			],
			"id": "bca549a1-fedc-4f22-9502-d54776d92fc0"
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c131183-ffb1-4174-b2ba-bcaea15d9165",
								"exec": [
									"pm.test(\"Status code Should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an 'OK'string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1c3f2919-f049-4e6c-9919-0e6e67593015",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todo/?todo_id=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "2"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				},
				{
					"name": "Get entry per ID - Invalid ID(params not using TODO ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78d14f86-9476-4307-9311-8ca639ba758a",
								"exec": [
									"pm.test(\"Status code Should be 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an 'Bad Request'string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3ec4c1f7-e95b-4254-b60b-5f274643469b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todo/?todo_id=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "2"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			],
			"id": "4ee7faf5-f23d-4145-9afc-2c73b5883fd6"
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e7cb56d-a194-4ab2-9756-7dcf58d8369d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d67ce297-af70-481b-b7ba-341c731667f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books?type=fiction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books - valid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e7cb56d-a194-4ab2-9756-7dcf58d8369d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var JsonData = pm.response.json();\r",
									"console.log(JsonData[0].id)\r",
									"pm.environment.set(\"bookId\",JsonData[0].id )"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ddfab7da-03e1-4122-aa07-e58a869ce099",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books?type=fiction",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books - invalid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08ca8fd6-e910-47db-8fc2-49f0dd27405f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string called 'Bad Request'\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "890324be-2e5e-44d3-84ef-d713924c4995",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books?type=romance",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "romance",
									"type": "text"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "addcbab6-e9d9-4514-88e5-4c1697b25c36"
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Register an API Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ea424f7-84c2-4bdd-aaa5-90d0beceaf87",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name has string Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"const response = pm.response.json();\r",
									"pm.environment.set(\"bearerToken\", response.accessToken);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2083ecd9-0240-4f9b-95f2-60298cd34039",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \"minnie51t2\",\n   \"clientEmail\": \"minnies51t2@mailinator.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://simple-books-api.glitch.me/api-clients/"
					},
					"response": []
				},
				{
					"name": "Place a book order - using invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a17a0bc1-918f-44f2-9c5f-c31c2f03217e",
								"exec": [
									"const Response = pm.response.json();\r",
									"\r",
									"console.log(Response.orderId);\r",
									"pm.environment.set(\"OrderId\", Response.orderId);\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Status code name has string called 'Unauthorised\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "94d5d054-dfc2-43fa-9be2-a82b1eb5a3e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followAuthorizationHeader": false
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "345r6tyuu8"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{bookId}},\n  \"customerName\": \"Minnie\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/orders"
					},
					"response": []
				},
				{
					"name": "Place a book order - using valid book ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a17a0bc1-918f-44f2-9c5f-c31c2f03217e",
								"exec": [
									"const Response = pm.response.json();\r",
									"\r",
									"console.log(Response.orderId);\r",
									"pm.environment.set(\"OrderId\", Response.orderId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name has string called Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b75ea68-5018-4fc9-9b89-7458346ed532",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"followAuthorizationHeader": false
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{bookId}},\n  \"customerName\": \"Minnie\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/orders"
					},
					"response": []
				},
				{
					"name": "Place a book order - using invalid book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51eb79d3-b84a-473b-b401-08088216d59e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4241317d-b0dc-4e2e-93d8-9feba6971e55",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 150,\n  \"customerName\": \"Minnie\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/orders"
					},
					"response": []
				},
				{
					"name": "Place a book order - using no book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dedf25ca-ddde-4907-b90c-8e495bd6baca",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string of 'Bad Request'\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b088a738-a6d7-47db-9a43-6b560ba3ff8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": \"\",\n  \"customerName\": \"Minnie\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/orders"
					},
					"response": []
				}
			],
			"id": "67ed3f99-0d25-49c0-a5d9-7b16f4d57b81"
		},
		{
			"name": "Get all orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3621b92e-efcd-4afa-8869-aa6a08ff1fd1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ac44cfd5-490c-4f2f-9fef-2b3a833169de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/orders"
					},
					"response": []
				}
			],
			"id": "6c038a90-c1db-488c-b383-953405b6263f"
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get an order - using a valid order number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf42c512-0b10-4fd2-b33a-b090720ca245",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Status code name has string (OK)\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response should contain customer name = Minnie\", function () {\r",
									"    pm.expect(jsonData.customerName).to.include(\"Minnie\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f50af27-22dd-4df9-bbf3-2512a7766672",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"Minnie\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using an invalid order number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7cc6831-e22a-480d-b4e4-0041756f6b62",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code name has string 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c29a3e4b-7d31-41ca-8d61-962b698f0b4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"Minnie\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"id": "aafd9dac-30b3-414e-a28a-1a97e8fa69c5",
									"key": "orderId",
									"value": "adeyi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using no order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b698bd33-043f-4240-99a0-f3645f56e782",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5e72f852-c6fb-41be-8666-efb4803a3c9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "4939cfbc-02c8-4ee0-accf-44c3ea93b162"
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order - using valid order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fb38cb3-94e0-45db-9767-0e4c78ede5b1",
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e45e609e-ede5-4043-927f-19c9cb3a074c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order - using invalid order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75d1ce7a-b6b4-4cb4-96f7-b26f07ba7e2c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string of 'Bad Request'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b9aff0ef-84e4-4a26-86ea-101482cc82b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"id": "421a8db2-5b22-46a7-8c36-5f1060043778",
									"key": "orderId",
									"value": "adeyi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order - using no order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f00a14a7-c4bb-4b10-8fe6-03fe57eeae66",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string of 'Not Found'\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "99ab7fcf-4fc4-43e3-80a7-2a1642717ae0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{bearerToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:orderId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"id": "1062ca18-25d0-4cf6-8685-2c9c91ac05bb",
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "005e558c-a8b1-47e3-974c-f915a9be55c1"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": ""
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "22a0b61a-63b6-49f8-adf1-5e18fd920e75",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a0a90da3-65a7-456e-a97a-c62a578f993f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "www.google.come",
			"type": "string"
		}
	]
}